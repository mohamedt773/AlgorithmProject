Question 1
CountingSort(A, n, k):
    let C[0..k] = [0, 0, ..., 0] 

    for i = 1 to n:
        C[A[i]] = C[A[i]] + 1

    for j = 1 to k:
        C[j] = C[j] + C[j-1]

    let B[1..n] = [0, 0, ..., 0] 
    for i = n down to 1:
        B[C[A[i]]] = A[i]
        C[A[i]] = C[A[i]] - 1

    return B


Initialization is O(k)
Counting Occurrences is O(n)
Cumulative Count is O(k)
Building Sorted Array is O(n)
Overall is O(n+k)

#python code
def counting_sort(A):
    k = max(A)
    n = len(A)
    
    C = [0] * (k + 1)
    for i in range(n):
        C[A[i]] += 1
    for j in range(1, k + 1):
        C[j] += C[j - 1]
    B = [0] * n
    for i in range(n - 1, -1, -1): 
        B[C[A[i]] - 1] = A[i]
        C[A[i]] -= 1

    return B


A = [4, 2, 2, 8, 3, 3, 1]
sorted_array = counting_sort(A)
print(sorted_array)
