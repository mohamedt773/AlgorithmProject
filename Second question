Prim(graph):
    Initialize MST = [], totalWeight = 0
    Let PQ = priority queue (min-heap)
    Let visited = [False] * n  
    Start from vertex 0:
        Add all edges of vertex 0 to PQ
        Mark vertex 0 as visited
    While MST does not contain all vertices:
        Extract edge (u, v) with smallest weight from PQ
        If v is already visited, continue
        Add (u, v) to MST
        totalWeight += weight of (u, v)
        Mark v as visited
        Add all edges from v to unvisited vertices to PQ
    Return MST and totalWeight



Adding/removing edges to/from the priority queue: O(log E)
Iterating through all vertices: O(V)
Adding edges for each vertex:  O(E logE)
total: O(E log V)



#python code
import heapq  

def prim(graph, n):
    MST = []  
    totalWeight = 0
    visited = [False] * n
    minHeap = []  

    visited[0] = True
    for neighbor, weight in graph[0]:
        heapq.heappush(minHeap, (weight, 0, neighbor))  # (weight, u, v)

    while len(MST) < n - 1: 
        weight, u, v = heapq.heappop(minHeap)
        if visited[v]:
            continue
        MST.append((u, v))
        totalWeight += weight
        visited[v] = True

        for neighbor, edgeWeight in graph[v]:
            if not visited[neighbor]:
                heapq.heappush(minHeap, (edgeWeight, v, neighbor))

    return MST, totalWeight




graph = {
    0: [(1, 2), (3, 6)],
    1: [(0, 2), (2, 3), (3, 8)],
    2: [(1, 3), (3, 5)],
    3: [(0, 6), (1, 8), (2, 5)],
}
n = 4 
mst_edges, mst_weight = prim(graph, n)
print(mst_edges)
print(mst_weight)
